side_project_BE/
├── app/                  # FastAPI 소스 코드가 들어가는 핵심 폴더
│   ├── __init__.py
│   ├── main.py           # FastAPI 앱 생성 및 라우터 연결
│   │
│   ├── core/             # 프로젝트의 핵심 설정 및 보안 관련 폴더
│   │   ├── __init__.py
│   │   ├── config.py     # 환경변수(DB 정보, API 키 등) 관리
│   │   └── security.py   # 비밀번호 해싱, JWT 토큰 생성 및 검증
│   │
│   ├── db/               # 데이터베이스 연결 및 세션 관리
│   │   ├── __init__.py
│   │   └── database.py   # SQLAlchemy 엔진, 세션 생성
│   │
│   ├── models/           # 데이터베이스 테이블 구조 정의 (SQLAlchemy Models)
│   │   ├── __init__.py
│   │   ├── user.py       # User 테이블
│   │   └── stock.py      # Portfolio, Watchlist 종목 테이블
│   │
│   ├── schemas/          # API 데이터 형식 정의 (Pydantic Schemas)
│   │   ├── __init__.py
│   │   ├── user.py       # User 생성/응답 스키마
│   │   ├── stock.py      # Stock 생성/응답 스키마
│   │   └── token.py      # JWT 토큰 스키마
│   │
│   ├── crud/             # 실제 DB CRUD(Create, Read, Update, Delete) 로직
│   │   ├── __init__.py
│   │   ├── crud_user.py  # User 관련 DB 작업
│   │   └── crud_stock.py # Stock 관련 DB 작업
│   │
│   ├── routers/          # API 엔드포인트(경로) 정의
│   │   ├── __init__.py
│   │   ├── users.py      # /users/signup, /users/login 등
│   │   └── portfolio.py  # /portfolio/stocks 등
│   │
│   └── workers/          # 백그라운드 작업 (크롤링, AI 분석) 폴더
│       ├── __init__.py
│       ├── celery_app.py # Celery 앱 설정
│       └── tasks.py      # 실제 백그라운드 작업(크롤링 등) 함수 정의
│
├── .env                  # DB 접속정보, API 키 등 민감정보 저장 (Git에 올리면 안 됨)
├── .gitignore            # Git에서 제외할 파일 목록
└── requirements.txt      # 프로젝트에 필요한 파이썬 라이브러리 목록


Phase 0: 프로젝트 기초 공사
가상환경 설정: python -m venv venv 명령어로 프로젝트만의 독립된 파이썬 환경을 만듭니다.

핵심 라이브러리 설치: requirements.txt 파일을 만들고 아래 라이브러리들을 설치합니다.

fastapi: FastAPI 프레임워크

uvicorn[standard]: FastAPI를 실행할 웹 서버

sqlalchemy: 데이터베이스 ORM

psycopg2-binary: PostgreSQL DB 드라이버

pydantic[email]: 데이터 유효성 검사 및 설정 관리

python-dotenv: .env 파일 로드

passlib[bcrypt]: 비밀번호 해싱

python-jose[cryptography]: JWT 토큰 생성/검증

Phase 1: "Hello World" API 서버 띄우기
목표: 가장 기본적인 API 서버가 내 컴퓨터에서 정상적으로 실행되는 것을 확인합니다.

작업 내용:

app/main.py 파일을 만들고 FastAPI 앱 인스턴스를 생성합니다.

@app.get("/") 엔드포인트를 하나 만들어 {"message": "Hello World"}를 반환하게 합니다.

터미널에서 uvicorn app.main:app --reload 명령어로 서버를 실행하고, 브라우저에서 http://127.0.0.1:8000 접속을 확인합니다.

Phase 2: 데이터베이스 연결 및 모델링
목표: FastAPI 앱이 데이터베이스와 통신할 수 있는 기반을 마련합니다.

작업 내용:

.env 파일에 데이터베이스 접속 정보를 작성합니다.

app/core/config.py에서 .env 파일의 정보를 읽어오도록 설정합니다.

app/db/database.py에서 SQLAlchemy 엔진과 세션을 설정합니다.

app/models/user.py와 app/models/stock.py에 필요한 테이블(users, stocks 등)을 Python 클래스로 정의합니다.

Phase 3: 사용자 인증 기능 구현 (회원가입/로그인)
목표: 사용자가 계정을 만들고, 로그인을 통해 API 접근 권한(JWT 토큰)을 얻을 수 있게 합니다.

작업 내용:

app/schemas/user.py, app/schemas/token.py에 API 요청/응답에 사용할 데이터 형식을 Pydantic으로 정의합니다.

app/core/security.py에 비밀번호를 암호화(해싱)하고, JWT 토큰을 생성하고 검증하는 함수를 만듭니다.

app/crud/crud_user.py에 데이터베이스에 사용자를 생성하고 조회하는 함수를 만듭니다.

app/routers/users.py에서 위 함수들을 조합하여 /signup (회원가입)과 /login (로그인) API 엔드포인트를 완성합니다.

Phase 4: 핵심 기능 API 구현 (포트폴리오/관심종목)
목표: 로그인한 사용자가 자신의 포트폴리오와 관심종목을 조회하고, 추가/삭제할 수 있는 API를 만듭니다.

작업 내용:

app/schemas/stock.py에 종목 추가/조회 시 사용할 데이터 형식을 정의합니다.

app/crud/crud_stock.py에 DB에서 특정 유저의 종목을 조회, 추가, 삭제하는 함수를 만듭니다.

app/routers/portfolio.py에서 로그인된 사용자만 접근 가능하도록 하고, CRUD 함수를 이용해 /portfolio/stocks (포트폴리오 관리), /watchlist/stocks (관심종목 관리) API 엔드포인트를 완성합니다.

Phase 5: 백그라운드 워커 구현 (크롤링 & AI 분석)
목표: API 서버와는 별개로, 주기적으로 데이터를 수집하고 분석하여 DB에 저장하는 시스템을 구축합니다.

작업 내용:

Celery와 Redis(또는 RabbitMQ)를 설치합니다.

app/workers/celery_app.py에서 Celery 인스턴스를 설정합니다.

app/workers/tasks.py에 실제 작업을 정의합니다.

crawl_and_analyze(stock_id) 함수를 만듭니다.

이 함수는 DB에서 분석할 종목 목록을 가져옵니다.

각 종목에 대해 뉴스 크롤링을 수행합니다.

크롤링한 데이터를 Google Gemini API에 보내 분석을 요청합니다.

분석 결과(매도/매수/관망)를 다시 DB의 해당 종목 정보에 업데이트합니다.

Celery Beat를 설정하여 위 tasks가 주기적으로(예: 1시간마다) 실행되도록 스케줄링합니다.

이 구조와 순서에 따라 개발을 진행하시면, 각 단계가 명확히 구분되어 있어 테스트하기 쉽고, 문제가 발생했을 때 원인을 찾기도 수월할 것입니다. 성공적인 프로젝트 개발을 응원합니다!







